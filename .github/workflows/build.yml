name: Build Android

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - '3.*'
  pull_request:
    branches:
      - main
      - '3.*'

jobs:
  build-android:
    name: Android (aarch64) Python ${{ matrix.python_version }}
    runs-on: macos-14
    timeout-minutes: 90
    env:
      CC: aarch64-linux-android34-clang
      CXX: aarch64-linux-android34-clang++
      LD: $CC
      AR: llvm-ar
      NM: llvm-nm
      RANLIB: llvm-ranlib
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_ROOT: ${{ github.workspace }}/android-ndk
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
    strategy:
      matrix:
        include:
          - python_version: "3.13"
            cpython_ref: "3.13"
            folder: "cpython-3.13"
            pkg_name: "pyv313"
            patch: true
          - python_version: "3.14"
            cpython_ref: "3.14"
            folder: "cpython-3.14"
            pkg_name: "pyv314"
            patch: false
          - python_version: "3.15"
            cpython_ref: "main"
            folder: "cpython-3.15"
            pkg_name: "pyv315"
            patch: false
    steps:
      - name: Install dependencies
        run: |
          for dep in readline llvm lld dpkg mpdecimal; do
            if ! brew list $dep >/dev/null 2>&1; then
              brew install $dep
            fi
          done
          if brew list gcc >/dev/null 2>&1; then
            brew uninstall gcc
          fi
          export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
          ls /Users/runner/python3/bin || true
          ls /Users/runner/.local/bin || true

      - name: Install Android SDK & NDK
        run: |
          set -e
          SDK_URL="https://dl.google.com/android/repository/commandlinetools-mac-10406996_latest.zip"
          NDK_URL="https://dl.google.com/android/repository/android-ndk-r26c-darwin.zip"
          SDK_DIR="${{ github.workspace }}/android-sdk"
          NDK_DIR="${{ github.workspace }}/android-ndk"

          # Download and extract SDK
          mkdir -p "$SDK_DIR/cmdline-tools"
          curl -L "$SDK_URL" -o sdk.zip
          unzip -q sdk.zip -d "$SDK_DIR/cmdline-tools"
          mv "$SDK_DIR/cmdline-tools/cmdline-tools" "$SDK_DIR/cmdline-tools/latest"
          rm sdk.zip

          # Download and extract NDK
          mkdir -p "$NDK_DIR"
          curl -L "$NDK_URL" -o ndk.zip
          unzip -q ndk.zip -d "$NDK_DIR"
          rm ndk.zip

          # Accept licenses and install platform tools and build-tools
          export ANDROID_SDK_ROOT="$SDK_DIR"
          export ANDROID_HOME="$SDK_DIR"
          yes | "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_DIR" --install "platform-tools" "build-tools;34.0.0" "platforms;android-34"
          yes | "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK_DIR" --licenses

          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$NDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$NDK_DIR" >> $GITHUB_ENV
          echo "PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/darwin-x86_64/bin:$PATH" >> $GITHUB_ENV

      - name: Checkout CPython
        uses: actions/checkout@v5
        with:
          repository: python/cpython
          ref: ${{ matrix.cpython_ref }}
          path: ${{ matrix.folder }}

      - name: Apply patches
        if: ${{ matrix.patch }}
        working-directory: ./${{ matrix.folder }}
        run: |
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/darwin-x86_64/bin:$PATH
          curl -L https://raw.githubusercontent.com/yubrajbhoi/termux-python/refs/heads/main/termux.patch -o termux.patch
          git apply termux.patch
          curl -L https://raw.githubusercontent.com/plfj/py-build/refs/heads/main/as13.patch -o as13.patch
          git apply ./as13.patch
      - name: Install pre-built compression libraries (bz2, lzma)
        run: |
          SYSROOT="${{ github.workspace }}/android-libs/aarch64-linux-android"
          mkdir -p ${{ github.workspace }}/android-libs
          mkdir -p "$SYSROOT"
          curl -L https://github.com/Aasyaco/Some-help/releases/download/compression_libs/compression-libs-aarch64-android.tar.gz -o compression-libs.tar.gz
          tar -xzvf compression-libs.tar.gz -C "${{ github.workspace }}/android-libs"
          echo "LDFLAGS=-L$SYSROOT/lib -Wl,-rpath,$SYSROOT/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$SYSROOT/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$SYSROOT/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$SYSROOT/lib" >> $GITHUB_ENV

      - name: Build CPython for Android
        working-directory: ./${{ matrix.folder }}/Android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          SYSROOT: ${{ github.workspace }}/android-libs/aarch64-linux-android
          CC: aarch64-linux-android34-clang
          CXX: aarch64-linux-android34-clang++
          AR: llvm-ar
          RANLIB: llvm-ranlib
          CFLAGS: "-O3 -flto -fomit-frame-pointer -fno-semantic-interposition -fno-trapping-math -fstrict-aliasing -I${{ github.workspace }}/android-libs/aarch64-linux-android/include"
          LDFLAGS: "-flto -L${{ github.workspace }}/android-libs/aarch64-linux-android/lib -Wl,-rpath,${{ github.workspace }}/android-libs/aarch64-linux-android/lib"
          LIBRARY_PATH: ${{ github.workspace }}/android-libs/aarch64-linux-android/lib
        run: |
          # Verify libraries are accessible
          ls -la ${{ github.workspace }}/android-libs/aarch64-linux-android/lib/
          ./android.py clean
          mkdir -p /Users/runner/work/Yer/Yer/${{ matrix.folder }}/cross-build
          mkdir -p /Users/runner/work/Yer/Yer/${{ matrix.folder }}/cross-build/build
          ./android.py ci aarch64-linux-android -- --with-ensurepip=yes --enable-optimizations --with-lto --with-computed-gotos --build=$(uname -m)-apple-darwin --host=aarch64-linux-android
          python${{ matrix.python_version }} -c "print(__import__('sys').version)" || echo 'Python not found' -p /Users/runner/work/Yer/Yer/${{ matrix.folder }}/cross-build/build
      - name: Package as .deb
        run: |
          PKG_NAME=${{ matrix.pkg_name }}
          PKG_VERSION=${{ matrix.python_version }}
          ARCH=aarch64
          BUILD_DIR=./${{ matrix.folder }}/cross-build/aarch64-linux-android
          OUT_DIR=$( [ -d "$BUILD_DIR/prefix" ] && echo "$BUILD_DIR/prefix" || echo "$BUILD_DIR/install" )
          DEB_DIR=$PKG_NAME

          mkdir -p $DEB_DIR/DEBIAN
          mkdir -p $DEB_DIR/usr
          cp -r $OUT_DIR/* $DEB_DIR/usr/

          cat > $DEB_DIR/DEBIAN/control <<EOF
          Package: $PKG_NAME
          Version: $PKG_VERSION
          Architecture: $ARCH
          Maintainer: Cross-compiled by NotFound
          Description: Python $PKG_VERSION cross-compiled for Termux aarch64
          EOF

          cat > $DEB_DIR/DEBIAN/postinst <<EOF
          #!/bin/sh
          set -e
          echo "$PKG_NAME installed successfully!"
          exit 0
          EOF
          chmod 755 $DEB_DIR/DEBIAN/postinst

          dpkg-deb --build $DEB_DIR ${PKG_NAME}_${PKG_VERSION}_${ARCH}.deb

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg_name }}
          path: ${{ matrix.pkg_name }}_${{ matrix.python_version }}_aarch64.deb
          if-no-files-found: error
